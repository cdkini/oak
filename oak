#!/usr/bin/env python3
from __future__ import annotations

import argparse
from typing import Generator
import re
import contextlib
import datetime as dt
import os
import pathlib
import shutil
import subprocess
import sys


# Constants ================================================================
ROOT_ENV_VAR = "OAK_ROOT"
EDITOR = "nvim"
DEPENDENCIES = (
    "fd",  # Find files
    "rg",  # Search files
    "fzf",  # Fuzzy finder
    "bat",  # Preview files
    EDITOR,
)
GREEN = "\033[32m"
RED = "\033[31m"
BLUE = "\033[34m"
RESET = "\033[0m"  # Resets color to default
DAILY_NOTE_NAME = dt.datetime.now().strftime("%Y-%m-%d")
DELETED = ".deleted"


# Commands =================================================================
def add_cmd(root: pathlib.Path, name: str, tags: list[str]) -> None:
    file_path = root / f"{name}.md"
    open_note(file_path, tags=tags)


def daily_cmd(root: pathlib.Path) -> None:
    today = DAILY_NOTE_NAME
    file_path = root / f"{today}.md"
    open_note(file_path, tags=["daily"])


def rm_cmd(root: pathlib.Path, query: str = "") -> None:
    with cd(root):
        files = fzf_select(
            query=query,
            reload_cmd="reload:fd -e md --follow --exclude .git --exclude .deleted {q}",
            preview_cmd="bat {} --style=full --color=always",
        )

        deleted_dir = root / DELETED
        if not deleted_dir.exists():
            deleted_dir.mkdir()

        for file in files:
            file.rename(deleted_dir / file.name)
            print(f"{BLUE}[DELETED]{RESET} {file.name}")


def grep_cmd(root: pathlib.Path, query: str = "") -> None:
    with cd(root):
        rg(query=query)


def find_cmd(root: pathlib.Path, query: str = "") -> None:
    with cd(root):
        fd(query=query)


def open_cmd(root: pathlib.Path, query: str = "", grep: bool = False):
    with cd(root):
        if grep:
            fzf_open(
                query=query,
                reload_cmd="reload:rg --column --color=always --smart-case {q} || :",
                preview_cmd="bat --style=full --color=always --highlight-line {2} {1}",
            )
        else:
            fzf_open(
                query=query,
                reload_cmd="reload:fd -e md --follow --exclude .git --exclude .deleted {q}",
                preview_cmd="bat {} --style=full --color=always",
            )


def ls_cmd(root: pathlib.Path) -> None:
    files = sorted(root.iterdir(), key=lambda f: f.stat().st_mtime, reverse=True)
    print(f"{BLUE}{'Name':30}{'Updated At':18}{'Created At':18}Tags{RESET}")
    for file in files:
        if file.is_file() and file.suffix == ".md":
            frontmatter = YAMLFrontmatter.parse(file)
            print(frontmatter)


def help_cmd() -> None:
    command_map = {
        "add": "Add a new note",
        "daily": "Add a new daily note",
        "find": "Search notes by name",
        "grep": "Search notes by content",
        "ls": "List files (in reverse chronological order)",
        "open": "Open note(s)",
        "rm": "Delete note(s)",
        "help": "Print this help message",
    }
    for cmd, description in command_map.items():
        print(f"{GREEN}{cmd:10}{RESET} {description}")


# Utils ====================================================================
def error(message: str) -> None:
    print(f"{RED}[ERROR]{RESET} {message}")
    sys.exit(1)


def open_note(path: pathlib.Path, tags: list[str], content: str = "") -> None:
    if not path.exists():
        init_file(path=path, tags=tags, content=content)

    subprocess.run([EDITOR, path])


class YAMLFrontmatter:
    _TIMESTAMP_FORMAT = "%Y-%m-%d %H:%M"
    _FRONTMATTER_REGEX = re.compile(r"^---\n((?:[a-zA-Z0-9_]+: *(.+)\n)*)---\n")
    _CONTENT_REGEX = re.compile(r"(\w+):\s*(.+)")

    def __init__(
        self,
        title: str,
        tags: list[str],
        created_at: dt.datetime = dt.datetime.now(),
        updated_at: dt.datetime | None = None,
    ) -> None:
        self.title = title
        self.tags = sorted(tags)
        self.created_at = created_at
        self.updated_at = updated_at or created_at

    def __str__(self) -> str:
        return f"{self.title:30}{self.updated_at:%D %H:%m}    {self.created_at:%D %H:%m}    {', '.join(t for t in self.tags)}"

    def render(self) -> str:
        return f"""---
title: {self.title}
created_at: {self.created_at.strftime(self._TIMESTAMP_FORMAT)}
tags: {", ".join(self.tags)}
---"""

    @classmethod
    def parse(cls, file: pathlib.Path) -> YAMLFrontmatter:
        text = file.read_text()
        match = cls._FRONTMATTER_REGEX.match(text)
        if not match:
            raise ValueError("Invalid YAML frontmatter format")

        yaml_content = match.group(1)
        parsed_data = {
            key: value.strip()
            for key, value in cls._CONTENT_REGEX.findall(yaml_content)
        }

        title = parsed_data.get("title", file.stem)
        tags = [tag for tag in parsed_data.get("tags", "").split(", ") if tag]
        created_at = dt.datetime.strptime(
            parsed_data.get("created_at", ""), cls._TIMESTAMP_FORMAT
        )
        updated_at = dt.datetime.fromtimestamp(file.stat().st_mtime)
        return cls(title=title, tags=tags, created_at=created_at, updated_at=updated_at)


def init_file(path: pathlib.Path, tags: list[str], content: str) -> None:
    frontmatter = YAMLFrontmatter(title=path.stem, tags=tags)
    path.touch()
    path.write_text(f"{frontmatter.render()}\n\n\n{content}")


@contextlib.contextmanager
def cd(root: pathlib.Path) -> Generator:
    directory = os.getcwd()
    os.chdir(root)
    try:
        yield
    finally:
        os.chdir(directory)


def fzf_open(query: str, reload_cmd: str, preview_cmd: str) -> None:
    # fmt: off
    fzf_cmd = [
        "fzf", "--disabled", "--ansi", "--multi",
        "--bind", f"start:{reload_cmd}",
        "--bind", f"change:{reload_cmd}",
        "--bind", "enter:become:if [[ $FZF_SELECT_COUNT -eq 0 ]]; then nvim {1} +{2}; else nvim +cw -q {+f}; fi",
        "--delimiter", ":",
        "--preview", preview_cmd,
        "--preview-window", "~4,+{2}+4/3,<80(up)",
        "--query", query,
    ]
    # fmt: on

    try:
        subprocess.run(fzf_cmd, check=True)
    except subprocess.CalledProcessError:
        error("Something went wrong with FZF!")


def fzf_select(query: str, reload_cmd: str, preview_cmd: str) -> list[pathlib.Path]:
    # fmt: off
    fzf_cmd = [
        "fzf", "--disabled", "--ansi", "--multi",
        "--bind", f"start:{reload_cmd}",
        "--bind", f"change:{reload_cmd}",
        "--preview", preview_cmd,
        "--preview-window", "~4,+{2}+4/3,<80(up)",
        "--query", query,
    ]
    # fmt: on

    try:
        result = subprocess.check_output(fzf_cmd)
    except subprocess.CalledProcessError:
        error("Something went wrong with FZF!")

    return [pathlib.Path(f) for f in result.decode("utf-8").strip().splitlines()]


def rg(query: str) -> None:
    subprocess.run(["rg", "--column", "--color=always", "--smart-case", query])


def fd(query: str) -> None:
    subprocess.run(["fd", "-e", "md", "--follow", "--exclude", ".git", query])


# Input parsing ============================================================
def init() -> tuple[pathlib.Path, argparse.Namespace]:
    _check_dependencies()
    root = _get_root()
    parsed = _parse_cmd_and_args()
    return root, parsed


def _get_root() -> pathlib.Path:
    root = os.environ.get(ROOT_ENV_VAR)
    if not root:
        error("Root not set!")

    root_path = pathlib.Path(root)  # type: ignore[arg-type] # Guaranteed to be set
    if not root_path.exists():
        error(f"Root '{root_path}' does not exist!")

    if not root_path.is_dir():
        error(f"Root '{root_path}' is not a directory!")

    if not root_path.joinpath(".dropbox").exists():
        error(f"Root '{root_path}' is not a Dropbox directory!")

    return root_path


def _parse_cmd_and_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("cmd", type=str, help="Command to run", default="help")
    parser.add_argument("-t", "--tags", nargs="+", type=str, help="Tags for the note")
    parser.add_argument("-g", "--grep", action="store_true", help="Enable grep search")
    parser.add_argument("args", nargs="*", type=str, help="Arguments for the command")

    namespace, unrecognized = parser.parse_known_args()
    for val in unrecognized:
        if val not in namespace.args:
            namespace.args.append(val)

    return namespace


def _check_dependencies() -> None:
    for dep in DEPENDENCIES:
        if shutil.which(dep) is None:
            error(f"Dependency {dep} not found!")


# Main =====================================================================
if __name__ == "__main__":
    root, parsed = init()
    cmd = parsed.cmd
    args = parsed.args

    if cmd == "add":
        add_cmd(root=root, name=args[0], tags=parsed.tags)
    elif cmd == "daily":
        daily_cmd(root=root)
    elif cmd == "find":
        find_cmd(root=root, query=args[0] if args else "")
    elif cmd == "grep":
        grep_cmd(root=root, query=args[0] if args else "")
    elif cmd == "ls":
        ls_cmd(root=root)
    elif cmd == "open":
        open_cmd(root=root, query=args[0] if args else "", grep=parsed.grep)
    elif cmd == "rm":
        rm_cmd(root=root, query=args[0] if args else "")
    elif cmd == "help":
        help_cmd()
    else:
        error(
            f"Command {cmd} not found! Use `{BLUE}oak help{RESET}` to see available commands."
        )
